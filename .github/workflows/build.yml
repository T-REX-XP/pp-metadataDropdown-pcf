name: build

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [16.x]
    env:
      projectfile: src/package
      msbuildtarget: src/package/src
      npm_project_dir: src/MetadataDropdown
      #version
      majorVersion: 1
      minorVersion: 0
      buildVersion: ${{ github.run_number }}
      buildType: Release

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x' # Specify the version you need
          
      - name: Get Solution Unique Name
        id: solution-unique-name
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ${{ env.msbuildtarget }}/Other/Solution.xml
          xpath: "//ImportExportXml/SolutionManifest/UniqueName"

      - name: Get Solution Version
        id: solution-version
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ${{ env.msbuildtarget }}/Other/Solution.xml
          xpath: "//ImportExportXml/SolutionManifest/Version"

      - name: Build solution with dotnet
        run: cd ${{ env.projectfile }} && dotnet build --configuration ${{ env.buildType }}

      - name: Managed Solution Artifact ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip
          path: ${{ env.projectfile }}/bin/${{ env.buildType }}/${{ steps.solution-unique-name.outputs.info }}.zip

      - name: Create Release ${{ steps.solution-unique-name.outputs.info }}_v${{ steps.solution-version.outputs.info }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.majorVersion }}.${{ env.minorVersion }}.${{ env.buildVersion }} #v.${{ steps.solution-version.outputs.info }} #${{ github.ref }}
          release_name: ${{ steps.solution-unique-name.outputs.info }}_v${{ steps.solution-version.outputs.info }}
          draft: false
          prerelease: false

      - name: Upload Release Asset ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip (Managed)
        id: release-managed-solution
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.projectfile }}/bin/${{ env.buildType }}/${{ steps.solution-unique-name.outputs.info }}.zip
          asset_name: ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip
          asset_content_type: application/zip
